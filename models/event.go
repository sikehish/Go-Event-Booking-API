package models

import (
	"fmt"
	"time"

	"github.com/sikehish/Go-Event-Booking-API/db"
)

type Event struct {
	ID          int64
	Name        string    `binding:"required"`
	Description string    `binding:"required"`
	Location    string    `binding:"required"`
	DateTime    time.Time `binding:"required"`
	UserID      int
}

// var events = []Event{}

func (e Event) Save() error {
	// events = append(events, e)
	query := `
	INSERT INTO events (name, description, location, date_time, user_id) VALUES (?, ?, ?, ?)`
	stmt, err := db.DB.Prepare(query) //Prepare creates a prepared statement for later queries or executions. Multiple queries or executions may be run concurrently from the returned statement.
	if err != nil {
		return err
	}

	defer stmt.Close()

	result, err := stmt.Exec(e.Name, e.Description, e.Location, e.DateTime, e.UserID)

	if err != nil {
		return err
	}

	id, err := result.LastInsertId() //LastInsertId returns the integer generated by the database in response to a command. Typically this will be from an "auto increment" column when inserting a new row.
	fmt.Printf("%v %v", e.ID, id)
	e.ID = id
	return err
}

func GetAllEvents() []Event {
	return events
}
